apiVersion: apps/v1
kind: Deployment
metadata:
  name: rest
  namespace: nico-rest
  labels:
    app: rest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rest
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rest
    spec:
      automountServiceAccountToken: true
      containers:
      - env:
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              key: flask_env
              name: python
              optional: false
        - name: FLASK_APP
          valueFrom:
            configMapKeyRef:
              key: flask_app
              name: python
              optional: false
        - name: AUTH_SECRET
          valueFrom:
            secretKeyRef:
              key: jwt_secret
              name: auth
              optional: false
        image: slaas/slaas-auth-ms:124
        imagePullPolicy: Always
        name: rest
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - mountPath: /tmp
            name: app
          - mountPath: /app-run/app/logs
            name: app
        securityContext:
          readOnlyRootFilesystem: true
          runAsGroup: 10000
          runAsUser: 10000
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
            scheme: HTTP
          failureThreshold: 5
          successThreshold: 5
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            memory: "100Mi"
            cpu: "150m"
          limits:
            memory: "500Mi"
            cpu: "250m"
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      imagePullSecrets:
      - name: regcred
      initContainers:
      - args:
        - -c
        - mysql --host terraform-20210323175225657500000001.cbycl4rwnwxi.us-west-2.rds.amazonaws.com
          -uadmin -pdXNlcl9wYXNzd29yZA== -e 'CREATE DATABASE IF NOT EXISTS authentication'
        command:
        - bash
        image: bitnami/mariadb:10.5.8-debian-10-r85
        imagePullPolicy: Always
        name: init-schemas
        securityContext:
          readOnlyRootFilesystem: true
          runAsGroup: 10000
          runAsUser: 10000
        resources:
          requests:
            memory: "100Mi"
            cpu: "150m"
          limits:
            memory: "500Mi"
            cpu: "250m"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      nodeSelector:
        purpose: backend
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccount: auth-service-account
      serviceAccountName: auth-service-account
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30